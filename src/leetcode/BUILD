# Leetcode 通用树结点
cc_library(
  name = "leetcode_tree_node",
  hdrs = ["treenode.hpp"],
)

cc_test(
  name = "treenode_test",
  srcs = ["treenode_test.cc"],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 通用链表结点
cc_library(
  name = "leetcode_link_list_node",
  hdrs = ["linklist.hpp"],
)

cc_test(
  name = "linklist_test",
  srcs = ["linklist_test.cc"],
  deps = [
    ":leetcode_link_list_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 1: Two Sum
cc_test(
  name = "leetcode1",
  srcs = [
    "leetcode1_two_sum.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 13: Roman to Integer
cc_test(
  name = "leetcode13",
  srcs = [
    "leetcode13_roman_to_integer.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 24: Swap Nodes in Pairs
cc_test(
  name = "leetcode24",
  srcs = [
    "leetcode24_swap_nodes_in_pairs.cc"
  ],
  deps = [
    ":leetcode_link_list_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 27: Remove Element
cc_test(
  name = "leetcode27",
  srcs = [
    "leetcode27_remove_element.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 66: Plus One
cc_test(
  name = "leetcode66",
  srcs = [
    "leetcode66_plus_one.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 70: Climbing Stairs
cc_test(
  name = "leetcode70",
  srcs = [
    "leetcode70_climbing_stairs.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 83: Remove Duplicates From Sorted List
cc_test(
  name = "leetcode83",
  srcs = [
    "leetcode83_remove_duplicates_from_sorted_list.cc"
  ],
  deps = [
    ":leetcode_link_list_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 100: Same Tree
cc_test(
  name = "leetcode100",
  srcs = [
    "leetcode100_same_tree.cc"
  ],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 104: Maximum Depth of Binary Tree
cc_test(
  name = "leetcode104",
  srcs = [
    "leetcode104_maximum_depth_of_binary_tree.cc"
  ],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 111: Minimum Depth of Binary Tree
cc_test(
  name = "leetcode111",
  srcs = [
    "leetcode111_minimum_depth_of_binary_tree.cc"
  ],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 119: Pascal's Triangle II
cc_test(
  name = "leetcode119",
  srcs = [
    "leetcode119_pascal_triangle_ii.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 121: Best Time to Buy and Sell Stock
cc_test(
  name = "leetcode121",
  srcs = [
    "leetcode121_best_time_to_buy_and_sell_stock.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 122: Best Time to Buy and Sell Stock II
cc_test(
  name = "leetcode122",
  srcs = [
    "leetcode122_best_time_to_buy_and_sell_stock_ii.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 136: Single Number
cc_test(
  name = "leetcode136",
  srcs = [
    "leetcode136_single_number.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 137: Single Number II
cc_test(
  name = "leetcode137",
  srcs = [
    "leetcode137_single_number_ii.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 162: Find Peak Element
cc_test(
  name = "leetcode162",
  srcs = [
    "leetcode162_find_peak_element.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 169: Majority Element
cc_test(
  name = "leetcode169",
  srcs = [
    "leetcode169_majority_element.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 171: Excel Sheet Column Number
cc_test(
  name = "leetcode171",
  srcs = [
    "leetcode171_excel_sheet_column_number.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 172: Factorial Trailing Zeroes
cc_test(
  name = "leetcode172",
  srcs = [
    "leetcode172_factorial_trailing_zeroes.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 189: Rotate Array
cc_test(
  name = "leetcode189",
  srcs = [
    "leetcode189_rotate_array.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)


# Leetcode 191: Number of 1 Bits
cc_test(
  name = "leetcode191",
  srcs = [
    "leetcode191_numbers_of_1_bits.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 202: Happy Number
cc_test(
  name = "leetcode202",
  srcs = [
    "leetcode202_happy_number.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 204: Count Primes
cc_test(
  name = "leetcode204",
  srcs = [
    "leetcode204_count_primes.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 206: Reverse Linked List
cc_test(
  name = "leetcode206",
  srcs = [
    "leetcode206_reverse_linked_list.cc"
  ],
  deps = [
    ":leetcode_link_list_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 217: Contains Duplicate
cc_test(
  name = "leetcode217",
  srcs = [
    "leetcode217_contains_duplicate.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 226: Invert Binary Tree
cc_test(
  name = "leetcode226",
  srcs = [
    "leetcode226_invert_binary_tree.cc"
  ],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 231: Power of Two
cc_test(
  name = "leetcode231",
  srcs = [
    "leetcode231_power_of_two.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 235: Lowest Common Ancestor of a Binary Search Tree
cc_test(
  name = "leetcode235",
  srcs = [
    "leetcode235_lowest_common_ancestor_of_a_binary_search_tree.cc"
  ],
  deps = [
    ":leetcode_tree_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 237: Delete Node in a Linked List
cc_test(
  name = "leetcode237",
  srcs = [
    "leetcode237_delete_node_in_a_linked_list.cc"
  ],
  deps = [
    ":leetcode_link_list_node",
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 238: Product of Array Except Self
cc_test(
  name = "leetcode238",
  srcs = [
    "leetcode238_product_of_array_except_self.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 242: Valid Anagram
cc_test(
  name = "leetcode242",
  srcs = [
    "leetcode242_valid_anagram.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 263: Ugly number
cc_test(
  name = "leetcode263",
  srcs = [
    "leetcode263_ugly_number.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 268: Missing Number
cc_test(
  name = "leetcode268",
  srcs = [
    "leetcode268_missing_number.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 292: Nim Game
cc_test(
  name = "leetcode292",
  srcs = [
    "leetcode292_nim_game.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 326: Power of Two
cc_test(
  name = "leetcode326",
  srcs = [
    "leetcode326_power_of_three.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 338: Counting Bits
cc_test(
  name = "leetcode338",
  srcs = [
    "leetcode338_counting_bits.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)

# Leetcode 717: 1-bit and 2-bit Characters
cc_test(
  name = "leetcode717",
  srcs = [
    "leetcode717_1-bit_and_2-bit_characters.cc"
  ],
  deps = [
    "@com_google_googletest//:gtest_main",
  ]
)